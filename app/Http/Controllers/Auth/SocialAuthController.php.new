<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;
use Firebase\JWT\JWT;
use Firebase\JWT\JWK;
use GuzzleHttp\Client;
use Google\Exception;
use phpseclib3\Crypt\RSA;
use phpseclib3\Math\BigInteger;

class SocialAuthController extends Controller
{
    /**
     * Verify a Firebase ID token
     *
     * @param string $token The Firebase ID token to verify
     * @return array|null The decoded token payload or null if verification fails
     */
    private function verifyFirebaseToken($token)
    {
        try {
            // Log the token verification attempt
            Log::info('Attempting to verify Firebase token', [
                'token_length' => strlen($token),
                'token_preview' => substr($token, 0, 20) . '...'
            ]);
            
            // First try the Google token info endpoint
            $client = new Client();
            $response = $client->request('GET', 'https://www.googleapis.com/oauth2/v3/tokeninfo', [
                'query' => ['id_token' => $token]
            ]);
            
            if ($response->getStatusCode() == 200) {
                $payload = json_decode($response->getBody(), true);
                Log::info('Firebase token verified via Google tokeninfo endpoint');
                return $payload;
            }
        } catch (\Exception $e) {
            Log::warning('Firebase token verification via tokeninfo failed', [
                'error' => $e->getMessage()
            ]);
        }
        
        // If the first method fails, try the Firebase Auth API
        try {
            // For Firebase tokens, we can also try to decode and verify the JWT directly
            // Get Google's public keys
            $client = new Client();
            $response = $client->request('GET', 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com');
            $keys = json_decode($response->getBody(), true);
            
            // Convert keys to JWK format
            $jwks = [];
            foreach ($keys as $kid => $cert) {
                $jwks[$kid] = $this->convertCertToJwk($cert);
            }
            
            // Decode the token header to get the key ID (kid)
            $tokenParts = explode('.', $token);
            if (count($tokenParts) !== 3) {
                throw new \Exception('Invalid token format');
            }
            
            $header = json_decode(base64_decode(strtr($tokenParts[0], '-_', '+/')), true);
            $kid = $header['kid'] ?? null;
            
            if (!$kid || !isset($jwks[$kid])) {
                throw new \Exception('Key ID not found');
            }
            
            // Verify and decode the token
            $payload = JWT::decode($token, JWK::parseKeySet(['keys' => [$jwks[$kid]]]), ['RS256']);
            Log::info('Firebase token verified via JWT verification');
            
            // Convert to array
            $payload = json_decode(json_encode($payload), true);
            return $payload;
        } catch (\Exception $e) {
            Log::warning('Firebase token verification via JWT failed', [
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }
    
    /**
     * Convert an X509 certificate to JWK format
     *
     * @param string $cert The X509 certificate
     * @return array The JWK formatted key
     */
    private function convertCertToJwk($cert)
    {
        $pem = chunk_split(base64_encode(base64_decode(str_replace(['-----BEGIN CERTIFICATE-----', '-----END CERTIFICATE-----', '\n', '\r'], '', $cert))), 64, "\n");
        $pem = "-----BEGIN CERTIFICATE-----\n" . $pem . "-----END CERTIFICATE-----\n";
        
        $rsa = RSA::loadX509($pem);
        $components = $rsa->getPublicKey()->toString('PKCS8');
        
        // Extract modulus and exponent
        $modulus = base64_encode($components['n']->toBytes());
        $exponent = base64_encode($components['e']->toBytes());
        
        // Remove padding
        $modulus = rtrim(strtr($modulus, '+/', '-_'), '=');
        $exponent = rtrim(strtr($exponent, '+/', '-_'), '=');
        
        return [
            'kty' => 'RSA',
            'alg' => 'RS256',
            'use' => 'sig',
            'n' => $modulus,
            'e' => $exponent,
        ];
    }

    /**
     * Handle Google authentication.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function googleAuth(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'token' => 'required|string',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        try {
            // Log the token for debugging
            Log::info('Google auth attempt with token', [
                'token_length' => strlen($request->token),
                'client_id' => config('services.google.client_id')
            ]);

            // Log the token for debugging
            Log::info('Google auth token details', [
                'token_length' => strlen($request->token),
                'token_preview' => substr($request->token, 0, 30) . '...'
            ]);
            
            // Try to verify the token
            $payload = null;
            
            // First try Firebase token verification
            try {
                Log::info('Attempting Firebase token verification');
                $payload = $this->verifyFirebaseToken($request->token);
                
                if ($payload) {
                    Log::info('Firebase token verification successful');
                }
            } catch (\Exception $e) {
                Log::warning('Firebase verification failed, falling back to Google client', [
                    'error' => $e->getMessage()
                ]);
            }
            
            // If Firebase verification failed, try Google Client
            if (!$payload) {
                try {
                    // Verify the Google ID token
                    $client = new \Google_Client();
                    $client->setClientId(config('services.google.client_id'));
                    
                    Log::info('Google client configured', [
                        'client_id' => $client->getClientId()
                    ]);
                    
                    Log::info('Attempting Google client token verification');
                    $payload = $client->verifyIdToken($request->token);
                    
                    if (!$payload) {
                        Log::error('Invalid Google token - null payload');
                        return response()->json(['message' => 'Invalid Google token - verification failed'], 401);
                    }
                } catch (\Exception $e) {
                    Log::error('Google token verification exception', [
                        'error' => $e->getMessage()
                    ]);
                    return response()->json(['message' => 'Invalid Google token - verification failed'], 401);
                }
            }
            
            // Final check if we have a valid payload
            if (!$payload) {
                Log::error('Invalid Google token - all verification methods failed');
                return response()->json(['message' => 'Invalid Google token'], 401);
            }
            
            // Log the payload for debugging
            Log::info('Google token payload', [
                'sub' => $payload['sub'] ?? 'missing',
                'email' => $payload['email'] ?? 'missing',
                'name' => $payload['name'] ?? 'missing'
            ]);

            // Get user info from payload
            $googleId = $payload['sub'];
            $email = $payload['email'];
            $name = $payload['name'] ?? '';
            $profilePhoto = $payload['picture'] ?? null;

            // Find existing user or create new one
            $user = User::where('google_id', $googleId)->orWhere('email', $email)->first();

            if (!$user) {
                // Create new user
                $user = User::create([
                    'name' => $name,
                    'email' => $email,
                    'google_id' => $googleId,
                    'password' => Hash::make(Str::random(16)),
                    'profile_photo' => $profilePhoto,
                    'role' => 'customer',
                ]);
                
                Log::info('Created new user from Google auth', [
                    'user_id' => $user->id,
                    'email' => $user->email
                ]);
                
                // Send welcome email to the new user
                try {
                    Mail::to($user->email)->send(new \App\Mail\WelcomeMail($user));
                    Log::info('Welcome email sent to Google auth user');
                } catch (\Exception $e) {
                    Log::error('Failed to send welcome email to Google auth user', [
                        'error' => $e->getMessage()
                    ]);
                    // Continue with registration even if email fails
                }
            } else {
                // Update existing user
                $user->update([
                    'google_id' => $googleId,
                    'profile_photo' => $profilePhoto ?? $user->profile_photo,
                ]);
                
                Log::info('Updated existing user from Google auth', [
                    'user_id' => $user->id
                ]);
            }

            // Create token for the user
            $token = $user->createToken('auth_token')->plainTextToken;

            return response()->json([
                'message' => 'Google authentication successful',
                'user' => $user,
                'token' => $token,
            ]);
        } catch (\Exception $e) {
            Log::error('Google authentication failed', [
                'error' => $e->getMessage()
            ]);
            return response()->json(['message' => 'Google authentication failed: ' . $e->getMessage()], 500);
        }
    }

    /**
     * Test method for Google authentication (for development only).
     * This bypasses the actual Google token verification.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function testGoogleAuth(Request $request)
    {
        try {
            // Use test email from request or default
            $email = $request->input('email', 'test@example.com');
            $name = $request->input('name', 'Test User');
            
            // Generate a fake Google ID
            $googleId = 'test_' . Str::random(20);
            
            // Find existing user or create new one
            $user = User::where('email', $email)->first();
            
            if (!$user) {
                // Create new user
                $user = User::create([
                    'name' => $name,
                    'email' => $email,
                    'google_id' => $googleId,
                    'password' => Hash::make(Str::random(16)),
                    'role' => 'customer',
                ]);
                
                Log::info('Created new test user', [
                    'user_id' => $user->id,
                    'email' => $user->email
                ]);
            } else {
                // Update existing user
                $user->update([
                    'google_id' => $googleId,
                ]);
                
                Log::info('Updated existing test user', [
                    'user_id' => $user->id,
                    'email' => $user->email
                ]);
            }
            
            $token = $user->createToken('auth_token')->plainTextToken;
            
            return response()->json([
                'message' => 'Test Google authentication successful',
                'user' => $user,
                'token' => $token,
            ]);
        } catch (\Exception $e) {
            Log::error('Test Google authentication failed', [
                'error' => $e->getMessage()
            ]);
            return response()->json(['message' => 'Test Google authentication failed: ' . $e->getMessage()], 500);
        }
    }

    /**
     * Handle Apple authentication.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function appleAuth(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'token' => 'required|string',
            'user' => 'nullable|array',
        ]);

        if ($validator->fails()) {
            return response()->json(['errors' => $validator->errors()], 422);
        }

        try {
            // Verify Apple identity token
            $payload = $this->verifyAppleToken($request->token);
            
            if (!$payload) {
                return response()->json(['message' => 'Invalid Apple token'], 401);
            }
            
            // Get user info from payload
            $appleId = $payload['sub'];
            $email = $payload['email'] ?? null;
            
            // Get name from user data if provided (Apple only sends name on first login)
            $userData = $request->user ?? [];
            $name = '';
            
            if (isset($userData['name'])) {
                if (isset($userData['name']['firstName']) && isset($userData['name']['lastName'])) {
                    $name = $userData['name']['firstName'] . ' ' . $userData['name']['lastName'];
                } elseif (isset($userData['name']['firstName'])) {
                    $name = $userData['name']['firstName'];
                } elseif (isset($userData['name']['lastName'])) {
                    $name = $userData['name']['lastName'];
                }
            }
            
            // Find existing user or create new one
            $user = User::where('apple_id', $appleId)->orWhere('email', $email)->first();
            
            if (!$user) {
                // Create new user
                $user = User::create([
                    'name' => $name ?: 'Apple User',
                    'email' => $email ?: $appleId . '@privaterelay.appleid.com',
                    'apple_id' => $appleId,
                    'password' => Hash::make(Str::random(16)),
                    'role' => 'customer',
                ]);
                
                Log::info('Created new user from Apple auth', [
                    'user_id' => $user->id,
                    'email' => $user->email
                ]);
            } else {
                // Update existing user
                $updates = ['apple_id' => $appleId];
                
                // Only update name if provided and user doesn't already have one
                if ($name && (!$user->name || $user->name === 'Apple User')) {
                    $updates['name'] = $name;
                }
                
                $user->update($updates);
                
                Log::info('Updated existing user from Apple auth', [
                    'user_id' => $user->id,
                    'email' => $user->email
                ]);
            }
            
            $token = $user->createToken('auth_token')->plainTextToken;
            
            return response()->json([
                'message' => 'Apple authentication successful',
                'user' => $user,
                'token' => $token,
            ]);
        } catch (\Exception $e) {
            Log::error('Apple authentication failed', [
                'error' => $e->getMessage()
            ]);
            return response()->json(['message' => 'Apple authentication failed: ' . $e->getMessage()], 500);
        }
    }

    /**
     * Verify Apple identity token.
     * 
     * This implements proper JWT verification with Apple's public key.
     *
     * @param string $identityToken
     * @return array|null
     */
    private function verifyAppleToken($identityToken)
    {
        try {
            // Get Apple's public keys
            $client = new Client();
            $response = $client->request('GET', 'https://appleid.apple.com/auth/keys');
            $keys = json_decode($response->getBody(), true);
            
            if (!isset($keys['keys']) || !is_array($keys['keys'])) {
                throw new \Exception('Invalid keys response from Apple');
            }
            
            // Decode the token header to get the key ID (kid)
            $tokenParts = explode('.', $identityToken);
            if (count($tokenParts) !== 3) {
                throw new \Exception('Invalid token format');
            }
            
            $header = json_decode(base64_decode(strtr($tokenParts[0], '-_', '+/')), true);
            $kid = $header['kid'] ?? null;
            
            if (!$kid) {
                throw new \Exception('No key ID in token header');
            }
            
            // Find the matching key
            $publicKey = null;
            foreach ($keys['keys'] as $key) {
                if ($key['kid'] === $kid) {
                    // Convert JWK to PEM format
                    $publicKey = $this->jwkToPem($key);
                    break;
                }
            }
            
            if (!$publicKey) {
                throw new \Exception('No matching key found for kid: ' . $kid);
            }
            
            // Verify and decode the token
            $payload = JWT::decode($identityToken, $publicKey, ['RS256']);
            
            // Verify the issuer and audience
            if ($payload->iss !== 'https://appleid.apple.com') {
                throw new \Exception('Invalid issuer');
            }
            
            $clientId = config('services.apple.client_id');
            if (!in_array($payload->aud, [$clientId, 'com.mmartplus.app'])) {
                throw new \Exception('Invalid audience');
            }
            
            // Convert to array
            return json_decode(json_encode($payload), true);
        } catch (\Exception $e) {
            Log::error('Apple token verification failed', [
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }
    
    /**
     * Convert a JWK (JSON Web Key) to PEM format
     *
     * @param array $jwk
     * @return string
     */
    private function jwkToPem($jwk)
    {
        // Ensure we have the necessary key components
        if (!isset($jwk['kty']) || $jwk['kty'] !== 'RSA') {
            throw new \Exception('Invalid key type');
        }
        
        if (!isset($jwk['n']) || !isset($jwk['e'])) {
            throw new \Exception('Missing key components');
        }
        
        // Convert base64url encoded values to binary
        $modulus = new BigInteger($this->urlsafeB64ToHex($jwk['n']), 16);
        $exponent = new BigInteger($this->urlsafeB64ToHex($jwk['e']), 16);
        
        // Create RSA key
        $rsa = RSA::createKey();
        $rsa = $rsa->withModulus($modulus)->withExponent($exponent);
        
        // Export public key in PEM format
        return $rsa->toString('PKCS8');
    }
    
    /**
     * Convert URL safe base64 to hexadecimal
     *
     * @param string $b64
     * @return string
     */
    private function urlsafeB64ToHex($b64)
    {
        // Add padding if needed
        $padded = str_pad($b64, strlen($b64) + (4 - strlen($b64) % 4) % 4, '=');
        
        // Convert from base64url to base64
        $base64 = strtr($padded, '-_', '+/');
        
        // Decode and convert to hex
        return bin2hex(base64_decode($base64));
    }
}
